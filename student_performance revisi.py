# -*- coding: utf-8 -*-
"""Student_Performance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B4pDbCpI2S_UJ_PylCXj1T62qqhbNMDQ

## Import Packages/Library yang Digunakan

Pada bagian ini, dilakukan import semua packages/library yang digunakan dalam proyek ini
"""

import pandas as pd
from google.colab import files
import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Loading

### Menunggah kaggle.json
Fungsi `files.upload()` dari Google Colab untuk mengunggah file dataset dari komputer lokal ke lingkungan notebook. Fungsi ini memungkinkan digunakan untuk mengunggah kaggle.json yang ingin digunakan dalam ini.
"""

files.upload()

"""Diperlukan beberapa langkah untuk mengonfigurasi akses ke API Kaggle dan mengunduh dataset yang dibutuhkan untuk proyek ini:

1. **Membuat Direktori untuk API Kaggle:**
   - Perintah `!mkdir ~/.kaggle` digunakan untuk membuat direktori `.kaggle` di lingkungan home pengguna. Direktori ini digunakan untuk menyimpan file kredensial API Kaggle.

2. **Memindahkan File `kaggle.json`:**
   - File `kaggle.json` yang berisi kredensial API dipindahkan ke direktori `.kaggle` menggunakan perintah `!mv kaggle.json ~/.kaggle/`. File ini diperlukan untuk mengautentikasi permintaan ke API Kaggle.

3. **Mengatur Izin Akses File:**
   - Perintah `!chmod 600 ~/.kaggle/kaggle.json` digunakan untuk mengubah izin file `kaggle.json` agar hanya pengguna yang dapat mengaksesnya. Ini meningkatkan keamanan kredensial API.

4. **Mengunduh Dataset dari Kaggle:**
   - Perintah `!kaggle datasets download nikhil7280/student-performance-multiple-linear-regression` digunakan untuk mengunduh dataset "Student Performance for Multiple Linear Regression" dari Kaggle. Dataset ini digunakan untuk tujuan analisis dan pembangunan model regresi linier.

Setelah menjalankan perintah-perintah ini, dataset akan diunduh dan tersedia dalam direktori kerja notebook colab untuk diproses lebih lanjut.
"""

! mkdir ~/.kaggle
! mv kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download nikhil7280/student-performance-multiple-linear-regression

"""Perintah `!unzip` untuk mengekstrak file zip yang baru saja diunduh, yaitu file `student-performance-multiple-linear-regression.zip`.

`!unzip "student-performance-multiple-linear-regression.zip"`: Perintah ini akan mengekstrak isi dari file ZIP.

Setelah mengekstrak file, file dataset yang ada di dalamnya, yang berupa file CSV akan digunakan dalam analisis lebih lanjut.
"""

!unzip "student-performance-multiple-linear-regression.zip"

"""Perintah ini menghapus file `student-performance-multiple-linear-regression.zip` yang ada di direktori `/content/` untuk menghemat ruang penyimpanan setelah file ZIP tidak lagi dibutuhkan.

Setelah perintah ini dijalankan, file ZIP yang telah diekstrak akan dihapus dari direktori kerja, sehingga hanya file dataset yang diperlukan yang tersisa untuk proses selanjutnya.
"""

!rm /content/student-performance-multiple-linear-regression.zip

"""Perintah ini membaca file CSV `Student_Performance.csv` dan memuatnya ke dalam sebuah DataFrame `df`. DataFrame ini akan digunakan untuk analisis lebih lanjut.

Setelah perintah ini dijalankan, dataset `Student_Performance.csv` akan dimuat ke dalam variabel `df`.
"""

df = pd.read_csv('/content/Student_Performance.csv')
df

"""## Exploratory Data Analysis

### Deskripsi Variabel

Pada tahap ini, dilakukan eksplorasi dataset untuk mendapatkan gambaran umum tentang struktur data dan nilai-nilai yang terkandung di dalamnya.

1. `df.info()`: Memberikan informasi tentang tipe data dan jumlah nilai yang valid di setiap kolom.
2. `df.describe()`: Menyediakan statistik deskriptif untuk fitur numerik dalam dataset.
"""

df.info()

"""Dataset ini terdiri dari beberapa fitur numerik dan kategorikal. Berdasarkan hasil `df.info()`, dapat dilihat bahwa dataset memiliki 10000 sampel, dan kolom-kolom dalam dataset memiliki tipe data yang sesuai (misalnya, numerik untuk skor, jam belajar, dll.). Tidak ada kolom yang memiliki tipe data yang salah."""

df.describe()

"""Dari hasil `df.describe()`, didapatkan gambaran tentang distribusi nilai dalam dataset.

### Missing Values

Kode ini memeriksa apakah ada nilai yang hilang dalam dataset menggunakan:
- `df.isnull().sum()`: Menampilkan jumlah nilai hilang untuk setiap kolom.
"""

df.isnull().sum()

"""Hasil dari `df.isnull().sum()` menunjukkan bahwa tidak ada nilai yang hilang pada dataset ini. Hal ini sangat penting karena tidak perlu melakukan teknik pengisian atau imputation untuk menangani missing values. Dataset ini sudah bersih dari nilai yang hilang

### Duplicated Values

Kode ini memeriksa apakah ada duplikasi data dalam dataset dan menghapusnya jika ada.
- `df.duplicated().sum()`: Menampilkan jumlah duplikasi.
- `df.drop_duplicates()`: Menghapus duplikasi data.
"""

print(f"Number of duplicated: {df.duplicated().sum()}")
df = df.drop_duplicates()

"""Dari hasil `df.duplicated().sum()`, diketahui bahwa terdapat beberapa duplikasi data dalam dataset. Namun, setelah dihapus menggunakan `df.drop_duplicates()`, tidak ada duplikasi yang akan mempengaruhi model yang dikembangkan. Menghapus duplikasi data penting untuk memastikan bahwa model tidak terlatih pada data yang redundan, yang bisa mengarah pada overfitting."""

print(f"Number of duplicated: {df.duplicated().sum()}")

"""Hasil akhir df, tidak ada data duplicate

### Outliers

Untuk menganalisis adanya outlier pada data numerik, maka digunakan boxplot dengan seaborn. Beberapa fitur yang dianalisis meliputi:
- `Hours Studied`, `Previous Scores`, `Sleep Hours`, `Sample Question Papers Practiced`, dan `Performance Index`.
"""

numeric_feature = ['Hours Studied', 'Previous Scores', 'Sleep Hours', 'Sample Question Papers Practiced','Performance Index']

plt.figure(figsize=(12, 8))

for i, x in enumerate(numeric_feature, 1):
  plt.subplot(2, 3, i)
  sns.boxplot(x=df[x])
  plt.title(f"Boxplot {x}")

plt.tight_layout()
plt.show()

"""Dalam visualisasi boxplot untuk fitur numerik, dapat dilihat tidak adanya outlier pada fitur-fitur tersebut.

### Multivariate Analysis

Dengan menggunakan `sns.pairplot()` dan `sns.heatmap()`, dapat dilihat hubungan antara fitur numerik dalam dataset. Salah satu temuan yang menarik adalah adanya korelasi positif yang cukup kuat antara "Previous Scores" dan "Performance Index" (skor kinerja), yang menunjukkan bahwa skor sebelumnya berpengaruh terhadap kinerja siswa.

- `sns.pairplot()`: Memvisualisasikan hubungan antar fitur dalam bentuk pairplot.
- `sns.heatmap()`: Menampilkan matriks korelasi antar fitur numerik dalam bentuk heatmap.
"""

sns.pairplot(df)

plt.figure(figsize=(10, 8))
correlation_matrix = df[numeric_feature].corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""Berdasarkan analisis multivariat ini, dapat disimpulkan bahwa `Previous Scores` adalah faktor tertinggi yang mempengaruhi kinerja siswa.

## Data Preparation

### Label Encoder

`LabelEncoder` digunakan untuk mengubah kolom kategorikal "Extracurricular Activities" menjadi nilai numerik agar dapat digunakan dalam model.
"""

from sklearn.preprocessing import StandardScaler, LabelEncoder
encoder = LabelEncoder()

df["Extracurricular Activities"] = encoder.fit_transform(df["Extracurricular Activities"])

"""### Train Test Split

Data dibagi menjadi dua bagian: data pelatihan dan data pengujian menggunakan `train_test_split` dari `sklearn.model_selection`. Bagian data pelatihan akan digunakan untuk melatih model, dan bagian data pengujian untuk mengevaluasi kinerja model.

- `X`: Fitur yang digunakan untuk prediksi.
- `y`: Target variabel (Performance Index).
- Data dibagi dengan proporsi 80% untuk pelatihan dan 20% untuk pengujian.
"""

from sklearn.model_selection import train_test_split

X = df.drop(["Performance Index"], axis=1)
y = df["Performance Index"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f'Total of sample in whole dataset: {len(X)}')
print(f'Total of sample in train dataset: {len(X_train)}')
print(f'Total of sample in test dataset: {len(X_test)}')

"""## Standarisasi

`StandardScaler` digunakan untuk menstandarisasi fitur numerik (seperti Hours Studied, Previous Scores, dll.) di data pelatihan. Ini penting untuk algoritma seperti regresi linier dan KNN yang sensitif terhadap skala fitur.

Setelah standarisasi, data memiliki rata-rata 0 dan standar deviasi 1.
"""

features = ["Hours Studied", "Previous Scores", "Sleep Hours", "Sample Question Papers Practiced"]

scaler = StandardScaler()
X_train[features] = scaler.fit_transform(X_train[features])

X_train.describe().round(4)

"""## Model Development

Terdapat tiga model regresi untuk memprediksi "Performance Index":
1. **Linear Regression**: Model regresi linier untuk prediksi berdasarkan hubungan linear antara fitur dan target.
2. **Random Forest**: Model Random Forest Regressor yang terdiri dari banyak pohon keputusan untuk meningkatkan akurasi prediksi.
3. **KNN (K-Nearest Neighbors)**: Model K-Nearest Neighbors untuk prediksi berdasarkan kedekatan dengan titik data terdekat.

Setiap model dilatih pada data pelatihan dan diukur menggunakan Mean Squared Error (MSE).
"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['Linear Regression', 'RandomForest', 'KNN'])

"""### Linear Regression"""

lr = LinearRegression()
lr.fit(X_train, y_train)

models.loc['train_mse','Linear Regression'] = mean_squared_error(y_pred = lr.predict(X_train), y_true=y_train)

"""### Random Forest"""

from sklearn.ensemble import RandomForestRegressor

RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','Random Forest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""### KNN"""

from sklearn.neighbors import KNeighborsRegressor

knn = KNeighborsRegressor(n_neighbors=20)
knn.fit(X_train, y_train)

models.loc['train_mse','KNN'] = mean_squared_error(y_pred=knn.predict(X_train), y_true=y_train)

"""## Evaluasi Model

Evaluasi terhadap model yang telah dikembangkan dengan menghitung MSE pada data pelatihan dan pengujian. Metrik ini memberikan gambaran seberapa baik model memprediksi target berdasarkan data yang ada.

Dan juga mencetak prediksi untuk 10 sampel pertama dari data pengujian untuk membandingkan nilai yang diprediksi dengan nilai asli (y_true).

Hasil evaluasi model disajikan dalam bentuk tabel dan grafik untuk membandingkan kinerja setiap model.
"""

X_test.loc[:, features] = scaler.transform(X_test[features]).astype(float)

model_dict = {'Linear Regression': lr, 'RandomForest': RF, 'KNN': knn}

for name, model in model_dict.items():
    models.loc["train_mse", name] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))
    models.loc['test_mse', name] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))

models

prediksi = X_test.iloc[:10].copy()
pred_dict = {'y_true':y_test[:10]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)

fig, ax = plt.subplots()
# Transpose the DataFrame to have 'test_mse' and 'train_mse' as columns
models = models.T
models.sort_values(by='test_mse', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Gambar diatas membandingkan nilai `train_mse` dan `test_mse` dari ketiga model yang diuji. Hal ini membantu untuk memvisualisasikan mana model yang paling baik dalam memprediksi "Performance Index", dalam hal ini yaitu Linear Regression."""